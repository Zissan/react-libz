{"version":3,"sources":["components/Label/Label.js","components/Label/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","components/ProgressBar/index.js","components/ProgressBar/ProgressBar.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js","docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOption.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","serviceWorker.js","index.js"],"names":["Label","htmlFor","label","required","style","display","color","TextInput","htmlId","name","type","onChange","placeholder","value","error","children","props","marginBottom","id","border","className","getColor","percent","getProgressWidth","width","parseInt","ProgressBar","height","backgroundColor","EyeIcon","xmlns","viewBox","transform","fill","d","cx","cy","r","PasswordInput","maxLength","showVisibilityToggle","quality","useState","showPassword","setShowPassword","href","onClick","event","preventDefault","marginLeft","length","module","exports","Example","ExampleOptional","ExampleRequired","ExampleAllFeatures","setValue","target","Example100Percent","Example10Percent","Example70Percent","ExampleError","ExampleOption","TextInputCSSModules","styles","fieldset","inputError","TextInputStyledComponents","FieldSet","styled","div","Input","input","Error","HelloWorld","message","defaultProps","ExampleHelloWorld","RegistrationForm","user","state","setState","onSubmit","validate","submitted","email","password","errors","this","minPasswordLength","Object","getOwnPropertyNames","confirmationMessage","passwordQuality","React","Component","ExampleRegistrationForm","console","log","TextInputBEM","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","code","keys","resolve","Navigation","components","key","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","toggleCode","prevState","showCode","example","description","ExampleComponent","require","componentName","default","Props","defaultValue","ComponentPage","component","examples","Docs","route","window","location","hash","substr","addEventListener","componentData","filter","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96312155.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n/** Label with required field display, htmlFor and block styling */\r\nconst Label = ({ htmlFor, label, required = false }) => {\r\n  return (\r\n    <label style={{ display: \"block\" }} htmlFor={htmlFor}>\r\n      {label} {required && <span style={{ color: \"red\" }}>*</span>}\r\n    </label>\r\n  );\r\n};\r\n\r\nLabel.propTypes = {\r\n  /** ID of the HTML controls to be associated with the label */\r\n  htmlFor: PropTypes.string.isRequired,\r\n  /** Label text */\r\n  label: PropTypes.string.isRequired,\r\n  /** Indicates whether the associated control is a required field if true */\r\n  required: PropTypes.bool\r\n};\r\n\r\nexport default Label;\r\n","export { default } from \"./Label\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.*/\r\nconst TextInput = ({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div style={{ marginBottom: 16 }}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && { border: \"solid 1px red\" }}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && (\r\n        <div className=\"error\" style={{ color: \"red\" }}>\r\n          {error}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInput;\r\n","export { default } from \"./TextInput\";\r\n","export { default } from \"./ProgressBar\";\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst getColor = percent => {\r\n  if (percent === 100) {\r\n    return \"green\";\r\n  }\r\n\r\n  if (percent > 50) {\r\n    return \"lightgreen\";\r\n  }\r\n  return \"red\";\r\n};\r\n\r\nexport const getProgressWidth = (percent, width) => {\r\n  return parseInt((percent / 100) * width, 10);\r\n};\r\n\r\nconst ProgressBar = ({ percent, width, height = 5 }) => {\r\n  return (\r\n    <div style={{ width: width, border: \"1px solid lightgray\" }}>\r\n      <div\r\n        style={{\r\n          width: getProgressWidth(percent, width),\r\n          height,\r\n          backgroundColor: getColor(percent)\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nProgressBar.propTypes = {\r\n  /** Percent of progress completed */\r\n  percent: PropTypes.number.isRequired,\r\n  /** Width of the progress bar */\r\n  width: PropTypes.number.isRequired,\r\n  /** Height of the progress bar */\r\n  height: PropTypes.number.isRequired\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React from \"react\";\r\n/** SVG Eye Icon */\r\nconst EyeIcon = props => {\r\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\r\n  return (\r\n    <svg\r\n      width=\"16\"\r\n      height=\"16\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      viewBox=\"0 0 22 22\"\r\n    >\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default EyeIcon;\r\n","export { default } from \"./EyeIcon\";\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextInput from \"../TextInput\";\r\nimport EyeIcon from \"../EyeIcon\";\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\n/** Password input with integrated label, quality tips, and show password toggle. It is a part of Specialization Pattern. */\r\nconst PasswordInput = ({\r\n  htmlId,\r\n  value,\r\n  label = \"Password\",\r\n  error,\r\n  onChange,\r\n  placeholder,\r\n  maxLength = 50,\r\n  showVisibilityToggle = false,\r\n  quality,\r\n  ...props\r\n}) => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handleVisibility = event => {\r\n    if (event) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    setShowPassword(!showPassword);\r\n  };\r\n  return (\r\n    <TextInput\r\n      type={showPassword ? \"text\" : \"password\"}\r\n      htmlId={htmlId}\r\n      value={value}\r\n      label={label}\r\n      error={error}\r\n      onChange={onChange}\r\n      placeholder={placeholder}\r\n      maxLength={maxLength}\r\n      required\r\n      {...props}\r\n    >\r\n      {showVisibilityToggle && (\r\n        <a href=\"#\" onClick={handleVisibility} style={{ marginLeft: 5 }}>\r\n          <EyeIcon />\r\n        </a>\r\n      )}\r\n      {value && value.length && quality && (\r\n        <ProgressBar percent={quality} width={130} />\r\n      )}\r\n    </TextInput>\r\n  );\r\n};\r\n\r\nPasswordInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Password value */\r\n  value: PropTypes.any,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n\r\n  /** Function called when password input value changes */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n\r\n  /** Placeholder displayed when no password is entered */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Set to true to show the toggle for displaying the currently entered password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n\r\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\r\n  quality: PropTypes.number,\r\n\r\n  /** Validation error to display */\r\n  error: PropTypes.string\r\n};\r\n\r\nexport default PasswordInput;\r\n","export { default } from \"./PasswordInput\";\r\n","module.exports = /* eslint-disable */ [{\"name\":\"EyeIcon\",\"description\":\"SVG Eye Icon\",\"code\":\"import React from \\\"react\\\";\\r\\n/** SVG Eye Icon */\\r\\nconst EyeIcon = props => {\\r\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\r\\n  return (\\r\\n    <svg\\r\\n      width=\\\"16\\\"\\r\\n      height=\\\"16\\\"\\r\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\r\\n      viewBox=\\\"0 0 22 22\\\"\\r\\n    >\\r\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\r\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\r\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\r\\n      </g>\\r\\n    </svg>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default EyeIcon;\\r\\n\",\"examples\":[{\"name\":\"Example\",\"description\":\"\",\"code\":\"import React from \\\"react\\\";\\r\\nimport EyeIcon from \\\"react-libz/EyeIcon\\\";\\r\\n\\r\\nconst Example = () => {\\r\\n  return <EyeIcon />;\\r\\n};\\r\\n\\r\\nexport default Example;\\r\\n\"}]},{\"name\":\"HelloWorld\",\"description\":\"A Hello World componet to demonstrate the use of react-docgen\",\"props\":{\"message\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message to display\",\"defaultValue\":{\"value\":\"\\\"World\\\"\",\"computed\":false}}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n/** A Hello World componet to demonstrate the use of react-docgen */\\r\\nfunction HelloWorld({ message }) {\\r\\n  return <div>Hello {message}</div>;\\r\\n}\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n  /** Message to display */\\r\\n  message: PropTypes.string.isRequired\\r\\n};\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n  message: \\\"World\\\"\\r\\n};\\r\\n\\r\\nexport default HelloWorld;\\r\\n\",\"examples\":[{\"name\":\"ExampleHelloWorld\",\"description\":\"HelloWorld Component basic usage\",\"code\":\"import React from \\\"react\\\";\\r\\nimport HelloWorld from \\\"react-libz/HelloWorld\\\";\\r\\n/** HelloWorld Component basic usage */\\r\\nfunction ExampleHelloWorld() {\\r\\n  return (\\r\\n    <div>\\r\\n      <HelloWorld message={\\\"Test\\\"} />\\r\\n    </div>\\r\\n  );\\r\\n}\\r\\n\\r\\nexport default ExampleHelloWorld;\\r\\n\"}]},{\"name\":\"Label\",\"description\":\"Label with required field display, htmlFor and block styling\",\"props\":{\"htmlFor\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"ID of the HTML controls to be associated with the label\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Label text\"},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Indicates whether the associated control is a required field if true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n/** Label with required field display, htmlFor and block styling */\\r\\nconst Label = ({ htmlFor, label, required = false }) => {\\r\\n  return (\\r\\n    <label style={{ display: \\\"block\\\" }} htmlFor={htmlFor}>\\r\\n      {label} {required && <span style={{ color: \\\"red\\\" }}>*</span>}\\r\\n    </label>\\r\\n  );\\r\\n};\\r\\n\\r\\nLabel.propTypes = {\\r\\n  /** ID of the HTML controls to be associated with the label */\\r\\n  htmlFor: PropTypes.string.isRequired,\\r\\n  /** Label text */\\r\\n  label: PropTypes.string.isRequired,\\r\\n  /** Indicates whether the associated control is a required field if true */\\r\\n  required: PropTypes.bool\\r\\n};\\r\\n\\r\\nexport default Label;\\r\\n\",\"examples\":[{\"name\":\"ExampleOptional\",\"description\":\"Optional Label\",\"code\":\"import React from \\\"react\\\";\\r\\nimport Label from \\\"react-libz/Label\\\";\\r\\n/** Optional Label */\\r\\nconst ExampleOptional = () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ExampleOptional;\\r\\n\"},{\"name\":\"ExampleRequired\",\"description\":\"Required Label\",\"code\":\"import React from \\\"react\\\";\\r\\nimport Label from \\\"react-libz/Label\\\";\\r\\n/** Required Label */\\r\\nconst ExampleRequired = () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ExampleRequired;\\r\\n\"}]},{\"name\":\"PasswordInput\",\"description\":\"Password input with integrated label, quality tips, and show password toggle. It is a part of Specialization Pattern.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Password value\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Input label\",\"defaultValue\":{\"value\":\"\\\"Password\\\"\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function called when password input value changes\"},\"maxLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Max password length accepted\",\"defaultValue\":{\"value\":\"50\",\"computed\":false}},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder displayed when no password is entered\"},\"showVisibilityToggle\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Set to true to show the toggle for displaying the currently entered password\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"quality\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Validation error to display\"}},\"code\":\"import React, { useState } from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport TextInput from \\\"../TextInput\\\";\\r\\nimport EyeIcon from \\\"../EyeIcon\\\";\\r\\nimport ProgressBar from \\\"../ProgressBar/ProgressBar\\\";\\r\\n/** Password input with integrated label, quality tips, and show password toggle. It is a part of Specialization Pattern. */\\r\\nconst PasswordInput = ({\\r\\n  htmlId,\\r\\n  value,\\r\\n  label = \\\"Password\\\",\\r\\n  error,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  maxLength = 50,\\r\\n  showVisibilityToggle = false,\\r\\n  quality,\\r\\n  ...props\\r\\n}) => {\\r\\n  const [showPassword, setShowPassword] = useState(false);\\r\\n  const handleVisibility = event => {\\r\\n    if (event) {\\r\\n      event.preventDefault();\\r\\n    }\\r\\n\\r\\n    setShowPassword(!showPassword);\\r\\n  };\\r\\n  return (\\r\\n    <TextInput\\r\\n      type={showPassword ? \\\"text\\\" : \\\"password\\\"}\\r\\n      htmlId={htmlId}\\r\\n      value={value}\\r\\n      label={label}\\r\\n      error={error}\\r\\n      onChange={onChange}\\r\\n      placeholder={placeholder}\\r\\n      maxLength={maxLength}\\r\\n      required\\r\\n      {...props}\\r\\n    >\\r\\n      {showVisibilityToggle && (\\r\\n        <a href=\\\"#\\\" onClick={handleVisibility} style={{ marginLeft: 5 }}>\\r\\n          <EyeIcon />\\r\\n        </a>\\r\\n      )}\\r\\n      {value && value.length && quality && (\\r\\n        <ProgressBar percent={quality} width={130} />\\r\\n      )}\\r\\n    </TextInput>\\r\\n  );\\r\\n};\\r\\n\\r\\nPasswordInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Password value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string,\\r\\n\\r\\n  /** Function called when password input value changes */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Max password length accepted */\\r\\n  maxLength: PropTypes.number,\\r\\n\\r\\n  /** Placeholder displayed when no password is entered */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Set to true to show the toggle for displaying the currently entered password */\\r\\n  showVisibilityToggle: PropTypes.bool,\\r\\n\\r\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\r\\n  quality: PropTypes.number,\\r\\n\\r\\n  /** Validation error to display */\\r\\n  error: PropTypes.string\\r\\n};\\r\\n\\r\\nexport default PasswordInput;\\r\\n\",\"examples\":[{\"name\":\"ExampleAllFeatures\",\"description\":\"\",\"code\":\"import React, { useState } from \\\"react\\\";\\r\\nimport PasswordInput from \\\"react-libz/PasswordInput\\\";\\r\\n\\r\\nconst ExampleAllFeatures = () => {\\r\\n  const [value, setValue] = useState(\\\"\\\");\\r\\n  const handleChange = ({ target }) => {\\r\\n    setValue(target.value);\\r\\n  };\\r\\n\\r\\n  const getQuality = () => {\\r\\n    return value.length > 10 ? 100 : value.length * 10;\\r\\n  };\\r\\n  return (\\r\\n    <div>\\r\\n      <PasswordInput\\r\\n        htmlId=\\\"password-input-export-all-features\\\"\\r\\n        name=\\\"password\\\"\\r\\n        value={value}\\r\\n        onChange={handleChange}\\r\\n        quality={getQuality()}\\r\\n        placeholder=\\\"Enter Password\\\"\\r\\n        showVisibilityToggle\\r\\n      />\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ExampleAllFeatures;\\r\\n\"}]},{\"name\":\"ProgressBar\",\"description\":\"\",\"props\":{\"percent\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Percent of progress completed\"},\"width\":{\"type\":{\"name\":\"number\"},\"required\":true,\"description\":\"Width of the progress bar\"},\"height\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Height of the progress bar\",\"defaultValue\":{\"value\":\"5\",\"computed\":false}}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\n\\r\\nconst getColor = percent => {\\r\\n  if (percent === 100) {\\r\\n    return \\\"green\\\";\\r\\n  }\\r\\n\\r\\n  if (percent > 50) {\\r\\n    return \\\"lightgreen\\\";\\r\\n  }\\r\\n  return \\\"red\\\";\\r\\n};\\r\\n\\r\\nexport const getProgressWidth = (percent, width) => {\\r\\n  return parseInt((percent / 100) * width, 10);\\r\\n};\\r\\n\\r\\nconst ProgressBar = ({ percent, width, height = 5 }) => {\\r\\n  return (\\r\\n    <div style={{ width: width, border: \\\"1px solid lightgray\\\" }}>\\r\\n      <div\\r\\n        style={{\\r\\n          width: getProgressWidth(percent, width),\\r\\n          height,\\r\\n          backgroundColor: getColor(percent)\\r\\n        }}\\r\\n      ></div>\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nProgressBar.propTypes = {\\r\\n  /** Percent of progress completed */\\r\\n  percent: PropTypes.number.isRequired,\\r\\n  /** Width of the progress bar */\\r\\n  width: PropTypes.number.isRequired,\\r\\n  /** Height of the progress bar */\\r\\n  height: PropTypes.number.isRequired\\r\\n};\\r\\n\\r\\nexport default ProgressBar;\\r\\n\",\"examples\":[{\"name\":\"Example100Percent\",\"description\":\"100% Progress and height 20px\",\"code\":\"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"react-libz/ProgressBar\\\";\\r\\n/** 100% Progress and height 20px */\\r\\nconst Example100Percent = () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <ProgressBar width={150} percent={100} height={20} />\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Example100Percent;\\r\\n\"},{\"name\":\"Example10Percent\",\"description\":\"10% Progress\",\"code\":\"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"react-libz/ProgressBar\\\";\\r\\n/** 10% Progress */\\r\\nconst Example10Percent = () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <ProgressBar width={150} percent={10} />\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Example10Percent;\\r\\n\"},{\"name\":\"Example70Percent\",\"description\":\"70% Progress\",\"code\":\"import React from \\\"react\\\";\\r\\nimport ProgressBar from \\\"react-libz/ProgressBar\\\";\\r\\n/** 70% Progress */\\r\\nconst Example70Percent = () => {\\r\\n  return (\\r\\n    <div>\\r\\n      <ProgressBar width={150} percent={70} />\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default Example70Percent;\\r\\n\"}]},{\"name\":\"RegistrationForm\",\"description\":\"Registration form with built-in validation.\",\"props\":{\"confirmationMessage\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Message displayed upon successful submission\",\"defaultValue\":{\"value\":\"\\\"Thanks for registering!\\\"\",\"computed\":false}},\"onSubmit\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Called when form is submitted\"},\"minPasswordLength\":{\"type\":{\"name\":\"number\"},\"required\":false,\"description\":\"Minimum password length\",\"defaultValue\":{\"value\":\"8\",\"computed\":false}}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport TextInput from \\\"../TextInput\\\";\\r\\nimport PasswordInput from \\\"../PasswordInput\\\";\\r\\n\\r\\n/** Registration form with built-in validation. */\\r\\nclass RegistrationForm extends React.Component {\\r\\n  constructor(props) {\\r\\n    super(props);\\r\\n\\r\\n    this.state = {\\r\\n      user: {\\r\\n        email: \\\"\\\",\\r\\n        password: \\\"\\\"\\r\\n      },\\r\\n      errors: {},\\r\\n      submitted: false\\r\\n    };\\r\\n  }\\r\\n\\r\\n  onChange = event => {\\r\\n    const user = this.state.user;\\r\\n    user[event.target.name] = event.target.value;\\r\\n    this.setState({ user });\\r\\n  };\\r\\n\\r\\n  // Returns a number from 0 to 100 that represents password quality.\\r\\n  // For simplicity, just returning % of min length entered.\\r\\n  // Could enhance with checks for number, special char, unique characters, etc.\\r\\n  passwordQuality(password) {\\r\\n    if (!password) return null;\\r\\n    if (password.length >= this.props.minPasswordLength) return 100;\\r\\n    const percentOfMinLength = parseInt(\\r\\n      (password.length / this.props.minPasswordLength) * 100,\\r\\n      10\\r\\n    );\\r\\n    return percentOfMinLength;\\r\\n  }\\r\\n\\r\\n  validate({ email, password }) {\\r\\n    const errors = {};\\r\\n    const { minPasswordLength } = this.props;\\r\\n\\r\\n    if (!email) errors.email = \\\"Email required.\\\";\\r\\n    if (password.length < minPasswordLength)\\r\\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\\r\\n\\r\\n    this.setState({ errors });\\r\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\r\\n    return formIsValid;\\r\\n  }\\r\\n\\r\\n  onSubmit = () => {\\r\\n    const { user } = this.state;\\r\\n    const formIsValid = this.validate(user);\\r\\n    if (formIsValid) {\\r\\n      this.props.onSubmit(user);\\r\\n      this.setState({ submitted: true });\\r\\n    }\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    const { errors, submitted } = this.state;\\r\\n    const { email, password } = this.state.user;\\r\\n\\r\\n    return submitted ? (\\r\\n      <h2>{this.props.confirmationMessage}</h2>\\r\\n    ) : (\\r\\n      <div>\\r\\n        <TextInput\\r\\n          htmlId=\\\"registration-form-email\\\"\\r\\n          name=\\\"email\\\"\\r\\n          onChange={this.onChange}\\r\\n          label=\\\"Email\\\"\\r\\n          value={email}\\r\\n          error={errors.email}\\r\\n          required\\r\\n        />\\r\\n\\r\\n        <PasswordInput\\r\\n          htmlId=\\\"registration-form-password\\\"\\r\\n          name=\\\"password\\\"\\r\\n          value={password}\\r\\n          onChange={this.onChange}\\r\\n          quality={this.passwordQuality(password)}\\r\\n          showVisibilityToggle\\r\\n          maxLength={50}\\r\\n          error={errors.password}\\r\\n        />\\r\\n\\r\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\r\\n      </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\n\\r\\nRegistrationForm.propTypes = {\\r\\n  /** Message displayed upon successful submission */\\r\\n  confirmationMessage: PropTypes.string,\\r\\n\\r\\n  /** Called when form is submitted */\\r\\n  onSubmit: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Minimum password length */\\r\\n  minPasswordLength: PropTypes.number\\r\\n};\\r\\n\\r\\nRegistrationForm.defaultProps = {\\r\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\r\\n  minPasswordLength: 8\\r\\n};\\r\\n\\r\\nexport default RegistrationForm;\\r\\n\",\"examples\":[{\"name\":\"ExampleRegistrationForm\",\"description\":\"\",\"code\":\"import React from \\\"react\\\";\\r\\nimport RegistrationForm from \\\"react-libz/RegistrationForm\\\";\\r\\n\\r\\nexport default class ExampleRegistrationForm extends React.Component {\\r\\n  onSubmit = user => {\\r\\n    console.log(user);\\r\\n  };\\r\\n\\r\\n  render() {\\r\\n    return <RegistrationForm onSubmit={this.onSubmit} />;\\r\\n  }\\r\\n}\\r\\n\"}]},{\"name\":\"TextInput\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"\\\"text\\\"\",\"computed\":false},{\"value\":\"\\\"number\\\"\",\"computed\":false},{\"value\":\"\\\"password\\\"\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.*/\\r\\nconst TextInput = ({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) => {\\r\\n  return (\\r\\n    <div style={{ marginBottom: 16 }}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        style={error && { border: \\\"solid 1px red\\\" }}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && (\\r\\n        <div className=\\\"error\\\" style={{ color: \\\"red\\\" }}>\\r\\n          {error}\\r\\n        </div>\\r\\n      )}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInput.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInput;\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from \\\"react\\\";\\r\\nimport TextInput from \\\"react-libz/TextInput\\\";\\r\\n/** Required TextBox with error */\\r\\nconst ExampleError = () => {\\r\\n  return (\\r\\n    <TextInput\\r\\n      htmlId=\\\"example-optional\\\"\\r\\n      label=\\\"First Name\\\"\\r\\n      name=\\\"firstname\\\"\\r\\n      onChange={() => {}}\\r\\n      required\\r\\n      error=\\\"First name is required.\\\"\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ExampleError;\\r\\n\"},{\"name\":\"ExampleOption\",\"description\":\"Optional Textbox\",\"code\":\"import React from \\\"react\\\";\\r\\nimport TextInput from \\\"react-libz/TextInput\\\";\\r\\n/** Optional Textbox */\\r\\nconst ExampleOption = () => {\\r\\n  return (\\r\\n    <TextInput\\r\\n      htmlId=\\\"example-optional\\\"\\r\\n      label=\\\"First Name\\\"\\r\\n      name=\\\"firstName\\\"\\r\\n      onChange={() => {}}\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ExampleOption;\\r\\n\"}]},{\"name\":\"TextInputBEM\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"\\\"text\\\"\",\"computed\":false},{\"value\":\"\\\"number\\\"\",\"computed\":false},{\"value\":\"\\\"password\\\"\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.*/\\r\\nconst TextInputBEM = ({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) => {\\r\\n  return (\\r\\n    <div className={\\\"textInput\\\"}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && \\\"textInput__input--error\\\"}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <div className=\\\"textInput__error\\\">{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInputBEM.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputBEM;\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from \\\"react\\\";\\r\\nimport TextInputBEM from \\\"react-libz/TextInputBEM\\\";\\r\\n/** Required TextBox with error */\\r\\nconst ExampleError = () => {\\r\\n  return (\\r\\n    <TextInputBEM\\r\\n      htmlId=\\\"example-optional\\\"\\r\\n      label=\\\"First Name\\\"\\r\\n      name=\\\"firstname\\\"\\r\\n      onChange={() => {}}\\r\\n      required\\r\\n      error=\\\"First name is required.\\\"\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ExampleError;\\r\\n\"}]},{\"name\":\"TextInputCSSModules\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"\\\"text\\\"\",\"computed\":false},{\"value\":\"\\\"number\\\"\",\"computed\":false},{\"value\":\"\\\"password\\\"\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\nimport styles from \\\"./TextInputCSSModules.css\\\";\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.*/\\r\\nconst TextInputCSSModules = ({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) => {\\r\\n  return (\\r\\n    <div className={styles.fieldset}>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        className={error && styles.inputError}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <div className={styles.error}>{error}</div>}\\r\\n    </div>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInputCSSModules.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputCSSModules;\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from \\\"react\\\";\\r\\nimport TextInputCSSModules from \\\"react-libz/TextInputCSSModules\\\";\\r\\n/** Required TextBox with error */\\r\\nconst ExampleError = () => {\\r\\n  return (\\r\\n    <TextInputCSSModules\\r\\n      htmlId=\\\"example-optional\\\"\\r\\n      label=\\\"First Name\\\"\\r\\n      name=\\\"firstname\\\"\\r\\n      onChange={() => {}}\\r\\n      required\\r\\n      error=\\\"First name is required.\\\"\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ExampleError;\\r\\n\"}]},{\"name\":\"TextInputStyledComponents\",\"description\":\"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.\",\"props\":{\"htmlId\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"},\"name\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input name. Recommend setting this to match object's property so a single change handler can be used.\"},\"label\":{\"type\":{\"name\":\"string\"},\"required\":true,\"description\":\"Input label\"},\"type\":{\"type\":{\"name\":\"enum\",\"value\":[{\"value\":\"\\\"text\\\"\",\"computed\":false},{\"value\":\"\\\"number\\\"\",\"computed\":false},{\"value\":\"\\\"password\\\"\",\"computed\":false}]},\"required\":false,\"description\":\"Input type\",\"defaultValue\":{\"value\":\"\\\"text\\\"\",\"computed\":false}},\"required\":{\"type\":{\"name\":\"bool\"},\"required\":false,\"description\":\"Mark label with asterisk if set to true\",\"defaultValue\":{\"value\":\"false\",\"computed\":false}},\"onChange\":{\"type\":{\"name\":\"func\"},\"required\":true,\"description\":\"Function to call onChange\"},\"placeholder\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"Placeholder to display when empty\"},\"value\":{\"type\":{\"name\":\"any\"},\"required\":false,\"description\":\"Value\"},\"error\":{\"type\":{\"name\":\"string\"},\"required\":false,\"description\":\"String to display when error occurs\"},\"children\":{\"type\":{\"name\":\"node\"},\"required\":false,\"description\":\"Child component to display next to the input\"}},\"code\":\"import React from \\\"react\\\";\\r\\nimport PropTypes from \\\"prop-types\\\";\\r\\nimport Label from \\\"../Label\\\";\\r\\nimport styled from \\\"styled-components\\\";\\r\\n\\r\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.*/\\r\\nconst TextInputStyledComponents = ({\\r\\n  htmlId,\\r\\n  name,\\r\\n  label,\\r\\n  type = \\\"text\\\",\\r\\n  required = false,\\r\\n  onChange,\\r\\n  placeholder,\\r\\n  value,\\r\\n  error,\\r\\n  children,\\r\\n  ...props\\r\\n}) => {\\r\\n  const FieldSet = styled.div`\\r\\n    margin-bottom: 16px;\\r\\n  `;\\r\\n\\r\\n  const Input = styled.input`\\r\\n    border: ${error ? \\\"1px solid red\\\" : \\\"\\\"};\\r\\n  `;\\r\\n\\r\\n  const Error = styled.div`\\r\\n    color: red;\\r\\n  `;\\r\\n\\r\\n  return (\\r\\n    <FieldSet>\\r\\n      <Label htmlFor={htmlId} label={label} required={required} />\\r\\n      <Input\\r\\n        id={htmlId}\\r\\n        type={type}\\r\\n        name={name}\\r\\n        placeholder={placeholder}\\r\\n        value={value}\\r\\n        onChange={onChange}\\r\\n        {...props}\\r\\n      />\\r\\n      {children}\\r\\n      {error && <Error>{error}</Error>}\\r\\n    </FieldSet>\\r\\n  );\\r\\n};\\r\\n\\r\\nTextInputStyledComponents.propTypes = {\\r\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\r\\n  htmlId: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\r\\n  name: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input label */\\r\\n  label: PropTypes.string.isRequired,\\r\\n\\r\\n  /** Input type */\\r\\n  type: PropTypes.oneOf([\\\"text\\\", \\\"number\\\", \\\"password\\\"]),\\r\\n\\r\\n  /** Mark label with asterisk if set to true */\\r\\n  required: PropTypes.bool,\\r\\n\\r\\n  /** Function to call onChange */\\r\\n  onChange: PropTypes.func.isRequired,\\r\\n\\r\\n  /** Placeholder to display when empty */\\r\\n  placeholder: PropTypes.string,\\r\\n\\r\\n  /** Value */\\r\\n  value: PropTypes.any,\\r\\n\\r\\n  /** String to display when error occurs */\\r\\n  error: PropTypes.string,\\r\\n\\r\\n  /** Child component to display next to the input */\\r\\n  children: PropTypes.node\\r\\n};\\r\\n\\r\\nexport default TextInputStyledComponents;\\r\\n\",\"examples\":[{\"name\":\"ExampleError\",\"description\":\"Required TextBox with error\",\"code\":\"import React from \\\"react\\\";\\r\\nimport TextInputStyledComponents from \\\"react-libz/TextInputStyledComponents\\\";\\r\\n\\r\\n/** Required TextBox with error */\\r\\nconst ExampleError = () => {\\r\\n  return (\\r\\n    <TextInputStyledComponents\\r\\n      htmlId=\\\"example-optional\\\"\\r\\n      label=\\\"First Name\\\"\\r\\n      name=\\\"firstname\\\"\\r\\n      onChange={() => {}}\\r\\n      required\\r\\n      error=\\\"First name is required.\\\"\\r\\n    />\\r\\n  );\\r\\n};\\r\\n\\r\\nexport default ExampleError;\\r\\n\"}]}]","import React from \"react\";\r\nimport EyeIcon from \"react-libz/EyeIcon\";\r\n\r\nconst Example = () => {\r\n  return <EyeIcon />;\r\n};\r\n\r\nexport default Example;\r\n","import React from \"react\";\r\nimport Label from \"react-libz/Label\";\r\n/** Optional Label */\r\nconst ExampleOptional = () => {\r\n  return (\r\n    <div>\r\n      <Label htmlFor=\"test\" label=\"test\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExampleOptional;\r\n","import React from \"react\";\r\nimport Label from \"react-libz/Label\";\r\n/** Required Label */\r\nconst ExampleRequired = () => {\r\n  return (\r\n    <div>\r\n      <Label htmlFor=\"test\" label=\"test\" required />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExampleRequired;\r\n","import React, { useState } from \"react\";\r\nimport PasswordInput from \"react-libz/PasswordInput\";\r\n\r\nconst ExampleAllFeatures = () => {\r\n  const [value, setValue] = useState(\"\");\r\n  const handleChange = ({ target }) => {\r\n    setValue(target.value);\r\n  };\r\n\r\n  const getQuality = () => {\r\n    return value.length > 10 ? 100 : value.length * 10;\r\n  };\r\n  return (\r\n    <div>\r\n      <PasswordInput\r\n        htmlId=\"password-input-export-all-features\"\r\n        name=\"password\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        quality={getQuality()}\r\n        placeholder=\"Enter Password\"\r\n        showVisibilityToggle\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExampleAllFeatures;\r\n","import React from \"react\";\r\nimport ProgressBar from \"react-libz/ProgressBar\";\r\n/** 100% Progress and height 20px */\r\nconst Example100Percent = () => {\r\n  return (\r\n    <div>\r\n      <ProgressBar width={150} percent={100} height={20} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example100Percent;\r\n","import React from \"react\";\r\nimport ProgressBar from \"react-libz/ProgressBar\";\r\n/** 10% Progress */\r\nconst Example10Percent = () => {\r\n  return (\r\n    <div>\r\n      <ProgressBar width={150} percent={10} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example10Percent;\r\n","import React from \"react\";\r\nimport ProgressBar from \"react-libz/ProgressBar\";\r\n/** 70% Progress */\r\nconst Example70Percent = () => {\r\n  return (\r\n    <div>\r\n      <ProgressBar width={150} percent={70} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example70Percent;\r\n","import React from \"react\";\r\nimport TextInput from \"react-libz/TextInput\";\r\n/** Required TextBox with error */\r\nconst ExampleError = () => {\r\n  return (\r\n    <TextInput\r\n      htmlId=\"example-optional\"\r\n      label=\"First Name\"\r\n      name=\"firstname\"\r\n      onChange={() => {}}\r\n      required\r\n      error=\"First name is required.\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExampleError;\r\n","import React from \"react\";\r\nimport TextInput from \"react-libz/TextInput\";\r\n/** Optional Textbox */\r\nconst ExampleOption = () => {\r\n  return (\r\n    <TextInput\r\n      htmlId=\"example-optional\"\r\n      label=\"First Name\"\r\n      name=\"firstName\"\r\n      onChange={() => {}}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExampleOption;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\nimport styles from \"./TextInputCSSModules.css\";\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.*/\r\nconst TextInputCSSModules = ({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div className={styles.fieldset}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && styles.inputError}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <div className={styles.error}>{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputCSSModules.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInputCSSModules;\r\n","import React from \"react\";\r\nimport TextInputCSSModules from \"react-libz/TextInputCSSModules\";\r\n/** Required TextBox with error */\r\nconst ExampleError = () => {\r\n  return (\r\n    <TextInputCSSModules\r\n      htmlId=\"example-optional\"\r\n      label=\"First Name\"\r\n      name=\"firstname\"\r\n      onChange={() => {}}\r\n      required\r\n      error=\"First name is required.\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExampleError;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\nimport styled from \"styled-components\";\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.*/\r\nconst TextInputStyledComponents = ({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const FieldSet = styled.div`\r\n    margin-bottom: 16px;\r\n  `;\r\n\r\n  const Input = styled.input`\r\n    border: ${error ? \"1px solid red\" : \"\"};\r\n  `;\r\n\r\n  const Error = styled.div`\r\n    color: red;\r\n  `;\r\n\r\n  return (\r\n    <FieldSet>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <Input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <Error>{error}</Error>}\r\n    </FieldSet>\r\n  );\r\n};\r\n\r\nTextInputStyledComponents.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInputStyledComponents;\r\n","import React from \"react\";\r\nimport TextInputStyledComponents from \"react-libz/TextInputStyledComponents\";\r\n\r\n/** Required TextBox with error */\r\nconst ExampleError = () => {\r\n  return (\r\n    <TextInputStyledComponents\r\n      htmlId=\"example-optional\"\r\n      label=\"First Name\"\r\n      name=\"firstname\"\r\n      onChange={() => {}}\r\n      required\r\n      error=\"First name is required.\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExampleError;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n/** A Hello World componet to demonstrate the use of react-docgen */\r\nfunction HelloWorld({ message }) {\r\n  return <div>Hello {message}</div>;\r\n}\r\n\r\nHelloWorld.propTypes = {\r\n  /** Message to display */\r\n  message: PropTypes.string.isRequired\r\n};\r\n\r\nHelloWorld.defaultProps = {\r\n  message: \"World\"\r\n};\r\n\r\nexport default HelloWorld;\r\n","import React from \"react\";\r\nimport HelloWorld from \"react-libz/HelloWorld\";\r\n/** HelloWorld Component basic usage */\r\nfunction ExampleHelloWorld() {\r\n  return (\r\n    <div>\r\n      <HelloWorld message={\"Test\"} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExampleHelloWorld;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TextInput from \"../TextInput\";\r\nimport PasswordInput from \"../PasswordInput\";\r\n\r\n/** Registration form with built-in validation. */\r\nclass RegistrationForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: {\r\n        email: \"\",\r\n        password: \"\"\r\n      },\r\n      errors: {},\r\n      submitted: false\r\n    };\r\n  }\r\n\r\n  onChange = event => {\r\n    const user = this.state.user;\r\n    user[event.target.name] = event.target.value;\r\n    this.setState({ user });\r\n  };\r\n\r\n  // Returns a number from 0 to 100 that represents password quality.\r\n  // For simplicity, just returning % of min length entered.\r\n  // Could enhance with checks for number, special char, unique characters, etc.\r\n  passwordQuality(password) {\r\n    if (!password) return null;\r\n    if (password.length >= this.props.minPasswordLength) return 100;\r\n    const percentOfMinLength = parseInt(\r\n      (password.length / this.props.minPasswordLength) * 100,\r\n      10\r\n    );\r\n    return percentOfMinLength;\r\n  }\r\n\r\n  validate({ email, password }) {\r\n    const errors = {};\r\n    const { minPasswordLength } = this.props;\r\n\r\n    if (!email) errors.email = \"Email required.\";\r\n    if (password.length < minPasswordLength)\r\n      errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n\r\n    this.setState({ errors });\r\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n    return formIsValid;\r\n  }\r\n\r\n  onSubmit = () => {\r\n    const { user } = this.state;\r\n    const formIsValid = this.validate(user);\r\n    if (formIsValid) {\r\n      this.props.onSubmit(user);\r\n      this.setState({ submitted: true });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { errors, submitted } = this.state;\r\n    const { email, password } = this.state.user;\r\n\r\n    return submitted ? (\r\n      <h2>{this.props.confirmationMessage}</h2>\r\n    ) : (\r\n      <div>\r\n        <TextInput\r\n          htmlId=\"registration-form-email\"\r\n          name=\"email\"\r\n          onChange={this.onChange}\r\n          label=\"Email\"\r\n          value={email}\r\n          error={errors.email}\r\n          required\r\n        />\r\n\r\n        <PasswordInput\r\n          htmlId=\"registration-form-password\"\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={this.onChange}\r\n          quality={this.passwordQuality(password)}\r\n          showVisibilityToggle\r\n          maxLength={50}\r\n          error={errors.password}\r\n        />\r\n\r\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Message displayed upon successful submission */\r\n  confirmationMessage: PropTypes.string,\r\n\r\n  /** Called when form is submitted */\r\n  onSubmit: PropTypes.func.isRequired,\r\n\r\n  /** Minimum password length */\r\n  minPasswordLength: PropTypes.number\r\n};\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: \"Thanks for registering!\",\r\n  minPasswordLength: 8\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React from \"react\";\r\nimport RegistrationForm from \"react-libz/RegistrationForm\";\r\n\r\nexport default class ExampleRegistrationForm extends React.Component {\r\n  onSubmit = user => {\r\n    console.log(user);\r\n  };\r\n\r\n  render() {\r\n    return <RegistrationForm onSubmit={this.onSubmit} />;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Label from \"../Label\";\r\n\r\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. It is a Opinionated building block.*/\r\nconst TextInputBEM = ({\r\n  htmlId,\r\n  name,\r\n  label,\r\n  type = \"text\",\r\n  required = false,\r\n  onChange,\r\n  placeholder,\r\n  value,\r\n  error,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div className={\"textInput\"}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && \"textInput__input--error\"}\r\n        {...props}\r\n      />\r\n      {children}\r\n      {error && <div className=\"textInput__error\">{error}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInputBEM.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string.isRequired,\r\n\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\r\n  name: PropTypes.string.isRequired,\r\n\r\n  /** Input label */\r\n  label: PropTypes.string.isRequired,\r\n\r\n  /** Input type */\r\n  type: PropTypes.oneOf([\"text\", \"number\", \"password\"]),\r\n\r\n  /** Mark label with asterisk if set to true */\r\n  required: PropTypes.bool,\r\n\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func.isRequired,\r\n\r\n  /** Placeholder to display when empty */\r\n  placeholder: PropTypes.string,\r\n\r\n  /** Value */\r\n  value: PropTypes.any,\r\n\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default TextInputBEM;\r\n","import React from \"react\";\r\nimport TextInputBEM from \"react-libz/TextInputBEM\";\r\n/** Required TextBox with error */\r\nconst ExampleError = () => {\r\n  return (\r\n    <TextInputBEM\r\n      htmlId=\"example-optional\"\r\n      label=\"First Name\"\r\n      name=\"firstname\"\r\n      onChange={() => {}}\r\n      required\r\n      error=\"First name is required.\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ExampleError;\r\n","var map = {\n\t\"./EyeIcon/Example\": 22,\n\t\"./EyeIcon/Example.js\": 22,\n\t\"./HelloWorld/ExampleHelloWorld\": 33,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 33,\n\t\"./Label/ExampleOptional\": 23,\n\t\"./Label/ExampleOptional.js\": 23,\n\t\"./Label/ExampleRequired\": 24,\n\t\"./Label/ExampleRequired.js\": 24,\n\t\"./PasswordInput/ExampleAllFeatures\": 25,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 25,\n\t\"./ProgressBar/Example100Percent\": 26,\n\t\"./ProgressBar/Example100Percent.js\": 26,\n\t\"./ProgressBar/Example10Percent\": 27,\n\t\"./ProgressBar/Example10Percent.js\": 27,\n\t\"./ProgressBar/Example70Percent\": 28,\n\t\"./ProgressBar/Example70Percent.js\": 28,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 34,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 34,\n\t\"./TextInput/ExampleError\": 29,\n\t\"./TextInput/ExampleError.js\": 29,\n\t\"./TextInput/ExampleOption\": 30,\n\t\"./TextInput/ExampleOption.js\": 30,\n\t\"./TextInputBEM/ExampleError\": 35,\n\t\"./TextInputBEM/ExampleError.js\": 35,\n\t\"./TextInputCSSModules/ExampleError\": 31,\n\t\"./TextInputCSSModules/ExampleError.js\": 31,\n\t\"./TextInputStyledComponents/ExampleError\": 32,\n\t\"./TextInputStyledComponents/ExampleError.js\": 32\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 49;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Navigation = ({ components }) => {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      {components.map(name => {\r\n        return (\r\n          <li key={name}>\r\n            <a href={`#${name}`}>{name}</a>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport hljs from \"highlight.js/lib/highlight\";\r\nimport javascript from \"highlight.js/lib/languages/javascript\";\r\n\r\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\r\n// import Highlight from 'react-highlight';\r\n\r\nclass CodeExample extends React.Component {\r\n  componentDidMount() {\r\n    hljs.registerLanguage(\"javascript\", javascript);\r\n    hljs.highlightBlock(this.element);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <pre\r\n        ref={ref => {\r\n          this.element = ref;\r\n        }}\r\n      >\r\n        <code>{this.props.children}</code>\r\n      </pre>\r\n    );\r\n  }\r\n}\r\n\r\nCodeExample.propTypes = {\r\n  children: PropTypes.string.isRequired\r\n};\r\n\r\nexport default CodeExample;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport CodeExample from \"./CodeExample\";\r\n\r\nclass Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { showCode: false };\r\n  }\r\n\r\n  toggleCode = event => {\r\n    event.preventDefault();\r\n    this.setState(prevState => {\r\n      return { showCode: !prevState.showCode };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { showCode } = this.state;\r\n    const { code, description, name } = this.props.example;\r\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\r\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`)\r\n      .default;\r\n    return (\r\n      <div className=\"example\">\r\n        {description && <h4>{description}</h4>}\r\n\r\n        <ExampleComponent />\r\n\r\n        <p>\r\n          <a href=\"\" onClick={this.toggleCode}>\r\n            {showCode ? \"Hide\" : \"Show\"} Code\r\n          </a>\r\n        </p>\r\n\r\n        {showCode && <CodeExample>{code}</CodeExample>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nExample.propTypes = {\r\n  example: PropTypes.object.isRequired,\r\n  componentName: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Example;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Props = ({ props }) => {\r\n  return (\r\n    <table className=\"props\">\r\n      <thead>\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Description</th>\r\n          <th>Type</th>\r\n          <th>Default</th>\r\n          <th>Required</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {Object.keys(props).map(key => {\r\n          return (\r\n            <tr key={key}>\r\n              <td>{key}</td>\r\n              <td>{props[key].description}</td>\r\n              <td>{props[key].type.name}</td>\r\n              <td>\r\n                {props[key].defaultValue && props[key].defaultValue.value}\r\n              </td>\r\n              <td>{props[key].required && \"X\"}</td>\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nProps.propTypes = {\r\n  props: PropTypes.object.isRequired\r\n};\r\n\r\nexport default Props;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Example from \"./Example\";\r\nimport Props from \"./Props\";\r\n\r\nconst ComponentPage = ({ component }) => {\r\n  const { name, description, props, examples } = component;\r\n\r\n  return (\r\n    <div className=\"componentpage\">\r\n      <h2>{name}</h2>\r\n      <p>{description}</p>\r\n\r\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\r\n      {examples.length > 0\r\n        ? examples.map(example => (\r\n            <Example\r\n              key={example.code}\r\n              example={example}\r\n              componentName={name}\r\n            />\r\n          ))\r\n        : \"No examples exist.\"}\r\n\r\n      <h3>Props</h3>\r\n      {props ? <Props props={props} /> : \"This component accepts no props.\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nComponentPage.propTypes = {\r\n  component: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ComponentPage;\r\n","import React, { Component } from \"react\";\r\nimport Navigation from \"./Navigation\";\r\nimport ComponentPage from \"./ComponentPage\";\r\nimport componentData from \"../../config/componentData\";\r\n\r\nexport default class Docs extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      route: window.location.hash.substr(1)\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"hashchange\", () => {\r\n      this.setState({ route: window.location.hash.substr(1) });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { route } = this.state;\r\n    const component = route\r\n      ? componentData.filter(component => component.name === route)[0]\r\n      : componentData[0];\r\n\r\n    return (\r\n      <div>\r\n        <Navigation\r\n          components={componentData.map(component => component.name)}\r\n        />\r\n        <ComponentPage component={component} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"../node_modules/highlight.js/styles/ocean.css\";\nimport App from \"./docs/Docs\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}